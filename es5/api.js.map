{"version":3,"sources":["../src/api.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;IAKqB,G;;;;;;;;;;;AAUnB,eAAY,UAAZ,EAAwB,QAAxB,EAAkC,gBAAlC,EAAoD;AAAA;;AAClD,SAAK,SAAL,GAAiB,QAAjB;AACA,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,iBAAL,GAAyB,gBAAzB;;AAEA,WAAO,IAAP;AACD;;;;;;;;;;;;;;;;4BAYO,M,QAAkC;AAAA,UAAxB,IAAwB,QAAxB,IAAwB;AAAA,UAAlB,KAAkB,QAAlB,KAAkB;AAAA,UAAX,OAAW,QAAX,OAAW;;AACxC,UAAM,UAAU,+BAAmB,EAAE,cAAF,EAAU,YAAV,EAAiB,gBAAjB,EAAnB,CAAhB;;AAEA,aAAO,yBAAM,KAAK,SAAL,IAAkB,QAAQ,EAA1B,CAAN,EAAqC,OAArC,EACJ,IADI,6BAEJ,IAFI,kBAAP;;AAID;;;;;;;;;;;;;;;;;;;;2BAwCM,O,EAAS;AACd,UAAI,KAAK,iBAAT,EAA4B;AAC1B,gBAAQ,WAAR,GAAsB,KAAK,iBAA3B,C;AACD;;AAED,aAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,EAAE,gBAAF,EAArB,CAAP;AACD;;;;;;;;;;;;4BASO,O,EAAS;AACf,aAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,EAAE,gBAAF,EAAtB,CAAP;AACD;;;;;;;;;;;6BAQQ;AACP,UAAM,UAAU,EAAhB;;AAEA,UAAI,KAAK,iBAAT,EAA4B;AAC1B,gBAAQ,WAAR,GAAsB,KAAK,iBAA3B;AACD;;AAED,aAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,EAAE,YAAU,KAAK,WAAjB,EAAgC,gBAAhC,EAAtB,CAAP;AACD;;;;;;;;;;;;2BASM,O,EAAS;AACd,aAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,EAAE,YAAU,KAAK,WAAjB,EAAgC,gBAAhC,EAArB,CAAP;AACD;;;;;;;;;;;;wBASG,K,EAAO;AACT,aAAO,KAAK,OAAL,CAAa,KAAb,EAAoB,EAAE,YAAU,KAAK,WAAjB,EAAgC,YAAhC,EAApB,CAAP;AACD;;;;;;;;;;;;;2BAUM,K,EAAO,O,EAAS;AACrB,aAAO,KAAK,OAAL,CAAa,KAAb,EAAoB,EAAE,YAAU,KAAK,WAAjB,EAAgC,YAAhC,EAAuC,gBAAvC,EAApB,CAAP;AACD;;;;;;;;;;;;2BASM,K,EAAO;AACZ,aAAO,KAAK,OAAL,CAAa,QAAb,EAAuB,EAAE,YAAU,KAAK,WAAjB,EAAgC,YAAhC,EAAvB,CAAP;AACD;;;;;;;;;;;;;yBAUI,K,EAAO,O,EAAS;AACnB,aAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,EAAE,YAAU,KAAK,WAAf,UAAF,EAAqC,YAArC,EAA4C,gBAA5C,EAArB,CAAP;AACD;;;wBA1Hc;AACb,aAAU,KAAK,SAAf,SAA4B,KAAK,WAAjC;AACD;;;;;;;;;;;wBAQgB;AACf,aAAO,KAAK,WAAZ;AACD;;;;;;;;;;sBASc,K,EAAO;AACpB,WAAK,WAAL,GAAmB,KAAnB;AACD;;;;;kBAlEkB,G","file":"api.js","sourcesContent":["import fetch from 'node-fetch';\nimport { makeRequestHeaders, checkResponseStatus, parseJSON } from './utils';\n\n/**\n *  API Class\n */\nexport default class Api {\n  /**\n   *  Class constructor\n   *\n   *  @method          constructor\n   *  @param           {String}             identifier          email\n   *  @param           {String}             endpoint            Api server endpoint\n   *  @param           {String}             confirmEmailPath    Path to be used in confirmation link\n   *  @return          {Object}             self\n   */\n  constructor(identifier, endpoint, confirmEmailPath) {\n    this._endpoint = endpoint;\n    this._identifier = identifier;\n    this._confirmEmailPath = confirmEmailPath;\n\n    return this;\n  }\n\n  /**\n   *  Fetcher prepares headers, sends requests and parses the result\n   *\n   *  @method          fetcher\n   *  @param           {String}           method                   GET, POST, PUT, PATCH, DELETE\n   *  @param           {String}           options.path             Endpoint path\n   *  @param           {String}           options.token            JWT Auth token\n   *  @param           {Object}           options.payload          Request payload\n   *  @return          {Promise}          HTTP Response\n   */\n  fetcher(method, { path, token, payload }) {\n    const headers = makeRequestHeaders({ method, token, payload });\n\n    return fetch(this._endpoint + (path || ''), headers)\n      .then(checkResponseStatus)\n      .then(parseJSON);\n      // .then(checkResponseSuccess);\n  }\n\n  /**\n   *  Get endpoint\n   *\n   *  @method          endpoint\n   *  @return          {String}          API endpoint\n   */\n  get endpoint() {\n    return `${this._endpoint}/${this._identifier}`;\n  }\n\n  /**\n   *  Get Identifier\n   *\n   *  @method          identifier\n   *  @return          {String}            Account identifier / email\n   */\n  get identifier() {\n    return this._identifier;\n  }\n\n  /**\n   *  Set Identifier\n   *\n   *  @method          identifier\n   *  @param           {String}            value          Account identifier / email\n   *  @return          {Void}              No return\n   */\n  set identifier(value) {\n    this._identifier = value;\n  }\n\n  /**\n   *  Signup\n   *\n   *  @method          signup\n   *  @param           {Object}           payload          { email, password }\n   *  @return          {Promise}          HTTP Response\n   */\n  signup(payload) {\n    if (this._confirmEmailPath) {\n      payload.confirmPath = this._confirmEmailPath;// eslint-disable-line\n    }\n\n    return this.fetcher('POST', { payload });\n  }\n\n  /**\n   *  Confirm account with token from email\n   *\n   *  @method          confirm\n   *  @param           {Object}           payload          { token }\n   *  @return          {Promise}          HTTP Response\n   */\n  confirm(payload) {\n    return this.fetcher('PATCH', { payload });\n  }\n\n  /**\n   *  Resend confirmation mail\n   *\n   *  @method          resend\n   *  @return          {Promise}          HTTP Response\n   */\n  resend() {\n    const payload = {};\n\n    if (this._confirmEmailPath) {\n      payload.confirmPath = this._confirmEmailPath;\n    }\n\n    return this.fetcher('PATCH', { path: `/${this._identifier}`, payload });\n  }\n\n  /**\n   *  Sign in account to get auth token\n   *\n   *  @method          signin\n   *  @param           {Object}           payload          { email, password }\n   *  @return          {Promise}          HTTP Response\n   */\n  signin(payload) {\n    return this.fetcher('POST', { path: `/${this._identifier}`, payload });\n  }\n\n  /**\n   *  Get keystore from keyserver\n   *\n   *  @method          get\n   *  @param           {String}           token          JWT Auth token\n   *  @return          {Promise}          HTTP Response\n   */\n  get(token) {\n    return this.fetcher('GET', { path: `/${this._identifier}`, token });\n  }\n\n  /**\n   *  Update keystore on server\n   *\n   *  @method          update\n   *  @param           {String}           token            JWT Auth token\n   *  @param           {Object}           payload          { keystore }\n   *  @return          {Promise}          HTTP Response\n   */\n  update(token, payload) {\n    return this.fetcher('PUT', { path: `/${this._identifier}`, token, payload });\n  }\n\n  /**\n   *  Remove account\n   *\n   *  @method          remove\n   *  @param           {String}           token          JWT Auth token\n   *  @return          {Promise}          HTTP Response\n   */\n  remove(token) {\n    return this.fetcher('DELETE', { path: `/${this._identifier}`, token });\n  }\n\n  /**\n   *  Fuel uPort account\n   *\n   *  @method          update\n   *  @param           {String}           token            JWT Auth token\n   *  @param           {Object}           payload          { code }\n   *  @return          {Promise}          HTTP Response\n   */\n  fuel(token, payload) {\n    return this.fetcher('POST', { path: `/${this._identifier}/fuel`, token, payload });\n  }\n}\n"]}