{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { getToken, generateAddress, apiEndpoint, generateRandomSeed } from './utils';\nimport EntropyCollector from './entropy';\nimport Api from './api';\n\n/**\n *  uPort SSO Class\n */\nclass uPortSSO {\n  /**\n   *  Constructor\n   *\n   *  @method          constructor\n   *  @param           {String}             options.email          Account email\n   *  @param           {String}             options.token          JWT Auth token\n   *  @param           {String}             options.url            API server URL\n   *  @param           {String}             options.confirmPath    Link to be sent in confirm email\n   *  @return          {Object}             self\n   */\n  constructor({ email, token, url = apiEndpoint, confirmPath } = {}) {\n    if (email) {\n      this._identifier = email;\n    }\n\n    if (token) {\n      this._token = token;\n    }\n\n    this._api = new Api(this._identifier, url, confirmPath);\n\n    return this;\n  }\n\n  /**\n   *  Get Identifier\n   *\n   *  @method          identifier\n   *  @return          {String}            Account identifier / email\n   */\n  get identifier() {\n    return this._identifier;\n  }\n\n  /**\n   *  Register account\n   *\n   *  @method          register\n   *  @param           {String}           _email             Account email\n   *  @param           {String}           _password          Account password\n   *  @return          {Promise}          HTTP Response\n   */\n  register(_email, _password) {\n    if (_email && (!this._identifier || this._identifier !== _email)) {\n      this._identifier = _email;\n      this._api.identifier = _email;\n    }\n\n    const email = this._identifier;\n\n    return getToken(email, _password)\n      .then(password => this._api.signup({ email, password }));\n  }\n\n  /**\n   *  Confirm email address with received token\n   *\n   *  @method          confirm\n   *  @param           {String}          _emailToken          JWT confirmation token\n   *  @return          {Promise}         HTTP Response\n   */\n  confirm(_emailToken) {\n    return this._api.confirm({ token: _emailToken });\n  }\n\n  /**\n   *  Resend confirmation email\n   *\n   *  @method          resend\n   *  @param           {String}           _email          Account email\n   *  @return          {Promise}          HTTP Response\n   */\n  resend(_email) {\n    if (_email && (!this._identifier || this._identifier !== _email)) {\n      this._identifier = _email;\n      this._api.identifier = _email;\n    }\n\n    const email = this._identifier;\n\n    return this._api.resend(email);\n  }\n\n  /**\n   *  Log in account to get auth token\n   *\n   *  @method          login\n   *  @param           {String}           _email             Account email\n   *  @param           {String}           _password          Account pass\n   *  @return          {Promise}          HTTP Response\n   */\n  login(_email, _password) {\n    if (_email && (!this._identifier || this._identifier !== _email)) {\n      this._identifier = _email;\n      this._api.identifier = _email;\n    }\n\n    const email = this._identifier;\n\n    return getToken(email, _password)\n      .then(password => this._api.signin({ email, password }));\n  }\n\n  /**\n   *  Get keystore form server\n   *\n   *  @method          get\n   *  @param           {String}           _token          JWT Auth token\n   *  @return          {Promise}          HTTP Response\n   */\n  get(_token) {\n    return this._api.get(_token);\n  }\n\n  /**\n   *  Generate 12 word mnemonic seed\n   *\n   *  @method          generateSeed\n   *  @param           {String}              _entropy          Extra entropy\n   *  @return          {String}              12 word sgeed\n   */\n  generateSeed(_entropy) {\n    return generateRandomSeed(_entropy);\n  }\n\n  /**\n   *  Generate keystore\n   *\n   *  @method          generate\n   *  @param           {String}          _token             JWT Auth token\n   *  @param           {String}          _password          Account password\n   *  @param           {String}          _seed              12 word seed\n   *  @param           {String}          _entropy           Additional entropy\n   *  @return          {Promise}         HTTP Response\n   */\n  generate(_token, _password, _seed, _entropy) {\n    return this._api.get(_token)\n      .then(_json => {\n        if (_json.keystore !== null) {\n          throw new Error('KeyStore already generated');\n        }\n\n        return generateAddress(_password, _seed, _entropy)\n          .then(keystore => this._api.update(_token, { keystore }));\n      });\n  }\n\n  /**\n   *  Migrate keystore\n   *\n   *  @method          migrate\n   *  @param           {String}          _token             JWT Auth token\n   *  @param           {String}          _password          Account password\n   *  @param           {String}          _seed              12 word seed\n   *  @return          {Promise}         HTTP Response\n   */\n  migrate(_token, _password, _seed) {\n    return this.generate(_token, _password, _seed, '');\n  }\n\n  /**\n   *  Remove account\n   *\n   *  @method          remove\n   *  @param           {String}           _token          JWT Auth token\n   *  @return          {Promise}          HTTP Response\n   */\n  remove(_token) {\n    return this._api.remove(_token);\n  }\n\n  /**\n   *  Collect entropy\n   *\n   *  @method          collectEntropy\n   *  @param           {Object}                 _global                   window or global object\n   *  @param           {Function}               progressCallback          Called to update progress\n   *  @param           {Function}               endCallback               Called when finished\n   *  @return          {Null}\n   */\n  collectEntropy(_global, progressCallback, endCallback) {\n    const _this = this;\n    const entropy = new EntropyCollector(_global);\n    const entropyLimit = 5000;\n    let progress = 0;\n\n    entropy.start();\n\n    this._entropyInterval = setInterval(() => {\n      if (entropy.estimatedEntropy > entropyLimit) {\n        const entropyString = String.fromCharCode.apply(null, new Uint16Array(entropy.buffer));\n        entropy.stop();\n        endCallback(entropyString);\n        clearInterval(_this._entropyInterval);\n      } else {\n        const percentage = parseInt(entropy.estimatedEntropy / entropyLimit * 100, 10);\n        if (percentage > progress) {\n          progress = percentage;\n          progressCallback(percentage);\n        }\n      }\n    }, 1000 / 30);\n  }\n\n  /**\n   *  Add fuel to account\n   *\n   *  @method          generate\n   *  @param           {String}          _token             JWT Auth token\n   *  @param           {String}          _code              Fuel code\n   *  @return          {Promise}         HTTP Response\n   */\n  fuel(_token, _code) {\n    return this._api.get(_token)\n      .then(_json => {\n        if (_json.keystore === null) {\n          throw new Error('KeyStore has to be generated');\n        }\n\n        return this._api.fuel(_token, { code: _code });\n      });\n  }\n}\n\nmodule.exports = uPortSSO;\n"]}